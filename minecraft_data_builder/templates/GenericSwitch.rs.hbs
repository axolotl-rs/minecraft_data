{{#if wrap_in_mod}}

    pub mod {{case content_name "snake"}}{
    use crate::common::protocol::PacketContent;
    use crate::common::protocol::PacketSwitch;
    use std::io::{BufRead, Error, ErrorKind, Result, Write};
    use std::str::FromStr;
{{/if}}
pub enum {{case content_name "camel"}} {
{{#each variants as |variant|}}
    {{#if variant.void}}
        {{variant.name}},
    {{/if}}
    {{#exists variant.fields}}
        {{case variant.name "camel"}} { {{#each variant.fields as |field|}}
            {{case field.name "snake"}}: {{field.type}},
        {{/each}}
        },
    {{/exists}}
    {{#exists variant.single}}
        {{case variant.name "camel"}}({{variant.single}}),
    {{/exists}}

{{/each}}
}

impl PacketSwitch for {{case content_name "camel"}}{
type CompareType = i32;

fn switch_read<Reader: BufRead>(
    key: Self::CompareType,
    reader: &mut Reader,
    ) -> Result<Self>
    where
    Self: Sized{
    match key {
{{#each variants as |variant|}}
    {{#if variant.void}}
        {{variant.requirement}} => Ok(Self::{{case variant.name "camel"}}),
    {{/if}}
    {{#exists variant.fields}}

        {{variant.requirement}} =>{
        {{#each variant.fields as |field|}}
            {{#exists field.switch }}
                    let {{case field.name "snake"}}: {{field.type}}= PacketSwitch::switch_read({{field.switch}},::reader)?;
            {{else}}
                    let {{case field.name "snake"}}: {{field.type}}= PacketContent::read(reader)?;
            {{/exists}}
        {{/each}}
            Ok(Self::{{case variant.name "camel"}}{
        {{#each fields as |field|}}
            {{case field.name "snake"}},
        {{/each}}
            })
            },
    {{/exists}}
    {{#exists variant.single}}
        {{variant.requirement}} =>{
        {{#exists field.switch }}
                let value: {{field.type}}= PacketSwitch::switch_read({{field.switch}},reader)?;
        {{else}}
                let value: {{variant.single}}= PacketContent::read(reader)?;
        {{/exists}}
            Ok(Self::{{case variant.name "camel"}}(value))
            },
    {{/exists}}
{{/each}}

    _ => {
    Err(Error::new(ErrorKind::Other, "Unknown packet"))
    },
    }
    }
    fn write<Writer: Write>(
    self,
    writer: &mut Writer,
    ) -> Result<usize>
    where
    Self: Sized {
    Ok(0)
    }
    }

{{#each children as |child|}}
    {{child}}
{{/each}}
{{#if wrap_in_mod}}
        }
{{/if}}