{{#if wrap_in_mod}}

    pub mod {{case content_name "snake"}}{
    use crate::common::protocol::PacketContent;
    use crate::common::protocol::PacketSwitch;
    use crate::common::protocol::GenericPacketSwitch;
    use std::io::{BufRead, Error, ErrorKind, Result, Write};
    use std::str::FromStr;
{{/if}}

pub struct {{case content_name "camel"}} {
{{#each fields as |field|}}
    pub {{case field.name "snake"}}: {{field.type}},
{{/each}}
}
impl PacketContent for {{case content_name "camel"}} {
fn read<Reader: BufRead>(reader: &mut Reader) -> Result<Self> {


{{#each fields as |field|}}
    {{#exists field.switch }}
            let {{case field.name "snake"}}: {{field.type}}= PacketSwitch::switch_read({{field.switch}},reader)?;
    {{else}}
        let {{case field.name "snake"}}: {{field.type}}= PacketContent::read(reader)?;
    {{/exists}}
{{/each}}
    Ok({{case content_name "camel"}} {
{{#each fields as |field|}}
        {{case field.name "snake"}},
{{/each}}
    })
    }
    fn write<Writer: Write>(
        self,
        writer: &mut Writer,
        ) -> Result<usize>
            where
            Self: Sized
            {
            {{#each fields as |field|}}
                self.{{case field.name "snake"}}.write(writer)?;
            {{/each}}

            Ok(0)
            }

            }


{{#each children as |child|}}
    {{child}}
{{/each}}
            {{#if wrap_in_mod}}
                }
            {{/if}}